// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2017-06-25 01:25:37.872454531 +0800 CST

package docs

import (
	"github.com/swaggo/swag"
	"thanhgit.com/mywebhook/main/variable"
	"strconv"
)

func Doc(_host string, _welcome_url string, _out_of_credit_url string, _server_fcall_donwn string, _server_backup_down string, _telegram_send_url string) string {
	return `{
    "swagger": "2.0",
    "info": {
        "description": "This is a My web hook",
        "title": "MY web hook",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Thanh",
            "url": "http://www.swagger.io/support",
            "email": "thanh29695@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": ` + _host + `,
    "basePath": "/api",
    "paths": {
		`+ _welcome_url +`: {
            "get": {
                "description": "Hi everyone, I am a MY web hook",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                ,
                "responses": {
                    "200": {
						"description": "Ok",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIStatus"
                        }
                    },
                    "400": {
                        "description": "We not find",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Empty",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
		`+ _out_of_credit_url +`: {
            "post": {
                "description": "send message to AOPT and Auto Ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
				"parameters": [
                ],
                ,
                "responses": {
                    "200": {
						"description": "Ok",
                        "schema": {
                            "type": "json",
                            "$ref": "#/definitions/web.APIStatus"
                        }
                    },
                    "400": {
                        "description": "We not find",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Empty",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
		`+ _server_fcall_donwn +`: {
            "post": {
                "description": "send message to AOPT and Auto Ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],	
				"parameters": [
                ],
                ,
                "responses": {
                    "200": {
						"description": "Ok",
                        "schema": {
                            "type": "json",
                            "$ref": "#/definitions/web.APIStatus"
                        }
                    },
                    "400": {
                        "description": "We not find",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Empty",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
		`+ _server_backup_down +`: {
            "post": {
                "description": "send message to Autoticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
				"parameters": [
                ],
                ,
                "responses": {
                    "200": {
						"description": "Ok",
                        "schema": {
                            "type": "json",
                            "$ref": "#/definitions/web.APIStatus"
                        }
                    },
                    "400": {
                        "description": "We not find",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Empty",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
		`+ _telegram_send_url +`: {
            "post": {
                "description": "send message to chanel telegram",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
				"parameters": [
                    {
                        "description": "notification body",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
							$ref": "#/definitions/web.Notification"
                        }
                    }
                ],
                ,
                "responses": {
                    "200": {
						"description": "Ok",
                        "schema": {
                            "type": "json",
                            "$ref": "#/definitions/web.APIStatus"
                        }
                    },
                    "400": {
                        "description": "We not find",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Empty",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
    },
    "definitions": {
        "web.APIError": {
            "type": "object",
            "properties": {
                "ErrorCode": {
                    "type": "integer"
                },
                "ErrorMessage": {
                    "type": "string"
                }
            }
        },
		"web.APIStatus": {
            "type": "object",
            "properties": {
                "Status": {
					"type": "string"
				},
				"Code": {
					"type": "integer"
				}
            }
        },
		"web.Notification": {
            "type": "object",
            "properties": {
                "ChatId": {
					"type": "integer"
				},
				"Message": {
					"type": "string"
				}
            }
        },
    }
}`
}

type s struct{}

func (s *s) ReadDoc() string {
	host 					:= variable.GetInstance().IP + ":" + strconv.Itoa(int(variable.GetInstance().Port))
	welcome_url 			:= variable.GetInstance().MY_ALERT_WELCOME
	out_of_credit_url		:= variable.GetInstance().MY_ALERT_OUT_OF_CREDIT
	server_fcall_down_url	:= variable.GetInstance().MY_ALERT_SERVER_FCALL_DOWN
	server_backupdown_url	:= variable.GetInstance().MY_ALERT_SERVER_BACKUP_DOWN
	telegram_send_url 		:= variable.GetInstance().MY_ALERT_TELEGRAM_SEND
	str := Doc(host, welcome_url, out_of_credit_url, server_fcall_down_url, server_backupdown_url, telegram_send_url)
	return str
}

func ReRegisterSwagger() {
	swag.Register(swag.Name, &s{})
}
